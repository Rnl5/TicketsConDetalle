@page "/registroTickets"
@page "/registroTickets/{TicketId:int}"

@inject HttpClient httpClient

<EditForm model ="Tickets" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="container">
        <div class="card">
            <div class ="card-header">
                <head>
                    <h1>Registro de Tickets</h1>
                </head>
            </div>

            <div class="card-body">
                <body>
                    <label>Id</label>
                    <div class="col-3">
                        <div class="input-group mb-3">
                            <InputNumber class ="form-control" @bind-Value="tickets.TicketId" aria-describedby="BotonBuscarId"></InputNumber>
                            <button type ="button" @onclick="Buscar" id="BotonBuscarId" class="btn btn-outline-primary"><i class="oi oi-magnifying-glass"></i></button>
                        </div>
                    </div>

                    <div class="col-3">
                        <div class="mb-3">
                            <label>Fecha:</label>
                            <InputDate class="form-control" @bind-Value="tickets.Fecha" aria-describedby="FechaTicket"></InputDate>
                            <ValidationMessage For ="@(() => tickets.Fecha)"></ValidationMessage>
                        </div>
                    </div>
                    
                    <div class="col-5">
                        <div class="mb-3">
                            <label>Solicitado Por:</label>
                            <InputText class="form-control" @bind-Value="tickets.SolicitadoPor" aria-describedby="SolicitadoPorTicket"></InputText>
                            <ValidationMessage For ="@(() => tickets.SolicitadoPor)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-5">
                            <div class="mb-4">
                                <label>Asunto:</label>
                                <InputTextArea class="form-control" @bind-Value="tickets.Asunto" aria-describedby="AsuntoTicket"></InputTextArea>
                                <ValidationMessage For ="@(() => tickets.Asunto)"></ValidationMessage>
                            </div>
                        </div>

                            <div class="col-5">
                                <div class="mb-4">
                                    <label>Descripci&oacute;n</label>
                                    <InputTextArea class="form-control" @bind-Value="tickets.Descripcion" aria-describedby="DescripcionTicket"></InputTextArea>
                                    <ValidationMessage For="@(() => tickets.Descripcion)"></ValidationMessage>
                                </div>
                            </div>
                    </div>




                    @*DETALLE*@
                    <fieldset class="border-success border border-1">
                        <h3>Mensajes</h3>
                        <div>
                            @*Nombre *@
                            <div class="col-5">
                                <label>Nombre:</label>
                                <InputText class="form-control" @bind-Value="Nombre"></InputText>
                            </div>

                            @*Mensaje *@
                            <div class="row">
                                <div class="col-5">
                                    <label>Mensaje</label>
                                    <InputTextArea class="form-control" @bind-Value="MensajeTicket"></InputTextArea>
                                </div>

                                <div class="col-5">
                                <br>
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
                                        <span class="oi oi-plus">Agregar</span>
                                    </button>
                                </div>

                            </div>
                            @if (ValidacionD.Length > 0)
                            {
                                <label class="text-danger">@ValidacionD</label>
                            }
                        </div>

                        @*Tabla de detalles*@ 
                            <hr />
                            <table class="table table-bordered table-light m-1">
                                <thead class="thead">
                                    <tr class="table">
                                        <th>Nombre</th>
                                        <th>Mensaje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var detalle in tickets.TicketsDetalle)
                                    {
                                        <tr>
                                        <td>@detalle.Emisor</td>
                                            <td>@detalle.Mensaje</td>
                                            <td> <button @onclick="@(() => RemoverDetalle(detalle))"><i class="oi oi-trash" /> Eliminar</button>   </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="row justify-content-between">
                                <div class="col-4">
                                    <label>Cantidad de Mensajes</label>
                                    <div class="input-group mb-3">
                                        <span class="form-control">@tickets.TicketsDetalle.Count()</span>
                                    </div>
                                </div>
                            </div>

                            <hr /> 
                    </fieldset>



                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><i class="oi oi-file">Nuevo</i></button>
                        <button type="submit" class="btn btn-outline-success"><i class="oi oi-document">Guardar</i></button>
                        <button type ="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="oi oi-trash">Eliminar</i></button>
                    </div>
                </body>
            </div>
        </div>
    </div>

</EditForm>


@code
{
    [Parameter]
    public int TicketId {get; set;}

    public Tickets tickets {get; set;} = new Tickets();

    public string Nombre {get; set;} = string.Empty;

    public string MensajeTicket {get; set;} = string.Empty;

    public string ValidacionD {get; set;} = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(TicketId > 0)
        {
            this.tickets.TicketId = TicketId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var ticketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{tickets.TicketId}");
        
        if(ticketEncontrado != null)
        {
            this.tickets = ticketEncontrado;
            StateHasChanged();
        }
        else
        {
            //Notificacion de que no se ha encontrado el ticket
        }
    }

    public void Nuevo()
    {
        this.tickets = new Tickets();
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Tickets", tickets);
        
        if(!response.IsSuccessStatusCode)
        {
            return;
        }

        var ticketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
        
        if(ticketDevuelto is not null)
        {
            tickets = ticketDevuelto;
            StateHasChanged();
            Nuevo();
        }
    }

    public void AgregarDetalle()
    {
        if(!ValidarDetalle())
        {
            return;
        }

        tickets.TicketsDetalle.Add(new TicketsDetalle()
        {
            Emisor = Nombre,
            Mensaje = MensajeTicket
        });

        Nombre = string.Empty;
        MensajeTicket = string.Empty;
        StateHasChanged();
    }

    public void RemoverDetalle(TicketsDetalle detalleRemover)
    {
        Nombre = detalleRemover.Emisor;
        MensajeTicket = detalleRemover.Mensaje;

        tickets.TicketsDetalle.Remove(detalleRemover);
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Tickets/{tickets.TicketId}");

        if(!response.IsSuccessStatusCode)
        {
            return;
        }
        else
        {
            Nuevo();
        }
    }

    public bool ValidarDetalle()
    {
        ValidacionD = string.Empty;
        if(string.IsNullOrWhiteSpace(Nombre))
        {
            ValidacionD = "El nombre es obligatorio";
        }

        if(string.IsNullOrWhiteSpace(MensajeTicket))
        {
            ValidacionD += "El mensaje es obligatorio";
        }

        return ValidacionD.Length == 0;
    }

}